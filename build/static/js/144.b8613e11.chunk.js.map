{"version":3,"sources":["views/extensions/ImageCropper.js","components/Widgets/Statistic/Notification.js","assets/images/light-box/l1.jpg"],"names":["ImageCropper","useState","defaultSrc","image","setImage","cropData","setCropData","cropper","setCropper","show","setShow","handleClose","Fragment","sm","message","link","Header","Body","className","type","onChange","e","files","preventDefault","dataTransfer","target","reader","FileReader","onload","result","readAsDataURL","onClick","style","height","width","initialAspectRatio","preview","src","viewMode","guides","minCropBoxHeight","minCropBoxWidth","background","responsive","autoCropArea","checkOrientation","onInitialized","instance","getCroppedCanvas","toDataURL","onHide","closeButton","Title","alt","Footer","variant","Notification","props","Link","href"],"mappings":"mSAsHeA,UA9GM,WACjB,MAA0BC,mBAASC,KAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCH,mBAAS,KAAzC,mBAAOI,EAAP,KAAiBC,EAAjB,KACA,EAA8BL,qBAA9B,mBAAOM,EAAP,KAAgBC,EAAhB,KAEA,EAAwBP,oBAAS,GAAjC,mBAAOQ,EAAP,KAAaC,EAAb,KAEMC,EAAc,kBAAMD,GAAQ,IAwBlC,OACI,eAAC,IAAME,SAAP,WACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAKC,GAAI,GAAT,SACI,cAAC,IAAD,CACIC,QAAQ,qEACRC,KAAK,oDAIjB,eAAC,IAAD,WACI,cAAC,IAAD,CAAKF,GAAI,GAAT,SACI,eAAC,IAAD,WACI,cAAC,IAAKG,OAAN,UACI,wDAEJ,eAAC,IAAKC,KAAN,WACI,eAAC,IAAD,CAAKC,UAAU,0BAAf,UACI,cAAC,IAAD,UACI,uBAAOC,KAAK,OAAOC,SAxClC,SAACC,GAEd,IAAIC,EADJD,EAAEE,iBAEEF,EAAEG,aACFF,EAAQD,EAAEG,aAAaF,MAChBD,EAAEI,SACTH,EAAQD,EAAEI,OAAOH,OAErB,IAAMI,EAAS,IAAIC,WACnBD,EAAOE,OAAS,WACZxB,EAASsB,EAAOG,SAEpBH,EAAOI,cAAcR,EAAM,SA8BH,cAAC,IAAD,UACI,qBAAKJ,UAAU,cAAf,SACI,cAAC,IAAD,CAAQa,QAAS,kBAAM3B,EAASF,MAAhC,oCAIZ,cAAC,IAAD,UACI,cAAC,IAAD,CAAKW,GAAI,GAAIK,UAAU,OAAvB,SACI,cAAC,IAAD,CACIc,MAAO,CAAEC,OAAQ,IAAKC,MAAO,QAC7BC,mBAAoB,EACpBC,QAAQ,eACRC,IAAKlC,EACLmC,SAAU,EACVC,QAAQ,EACRC,iBAAkB,GAClBC,gBAAiB,GACjBC,YAAY,EACZC,YAAY,EACZC,aAAc,EACdC,kBAAkB,EAClBC,cAAe,SAACC,GACZvC,EAAWuC,kBAQvC,cAAC,IAAD,CAAKlC,GAAI,GAAT,SACI,cAAC,IAAD,CACIkB,QAAS,WA1DF,qBAAZxB,GACPD,EAAYC,EAAQyC,mBAAmBC,aAnBtBvC,GAAQ,IA2EjB,0BASJ,eAAC,IAAD,CAAOD,KAAMA,EAAMyC,OAAQvC,EAA3B,UACI,cAAC,IAAMK,OAAP,CAAcmC,aAAW,EAAzB,SACI,cAAC,IAAMC,MAAP,6BAEJ,cAAC,IAAMnC,KAAP,UACI,qBAAKe,MAAO,CAAEE,MAAO,OAAQD,OAAQ,QAAUI,IAAKhC,EAAUgD,IAAI,cAEtE,cAAC,IAAMC,OAAP,UACI,cAAC,IAAD,CAAQC,QAAQ,YAAYxB,QAASpB,EAArC,gC,iCC5GxB,oCAgBe6C,IAbM,SAACC,GAClB,OACI,cAAC,IAAM7C,SAAP,UACI,eAAC,IAAD,CAAO2C,QAAQ,UAAf,UACKE,EAAM3C,QACP,cAAC,IAAM4C,KAAP,CAAYC,KAAMF,EAAM1C,KAAMU,OAAO,SAASP,UAAU,cAAxD,yC,iCCRD,QAA0B","file":"static/js/144.b8613e11.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Row, Col, Card, Button, Modal } from 'react-bootstrap';\nimport Cropper from 'react-cropper';\nimport ModuleNotification from '../../components/Widgets/Statistic/Notification';\nimport 'cropperjs/dist/cropper.css';\n\nimport defaultSrc from '../../assets/images/light-box/l1.jpg';\n\nconst ImageCropper = () => {\n    const [image, setImage] = useState(defaultSrc);\n    const [cropData, setCropData] = useState('#');\n    const [cropper, setCropper] = useState();\n\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    const onChange = (e) => {\n        e.preventDefault();\n        let files;\n        if (e.dataTransfer) {\n            files = e.dataTransfer.files;\n        } else if (e.target) {\n            files = e.target.files;\n        }\n        const reader = new FileReader();\n        reader.onload = () => {\n            setImage(reader.result);\n        };\n        reader.readAsDataURL(files[0]);\n    };\n\n    const getCropData = () => {\n        if (typeof cropper !== 'undefined') {\n            setCropData(cropper.getCroppedCanvas().toDataURL());\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <Row>\n                <Col sm={12}>\n                    <ModuleNotification\n                        message=\"For more info please check the components's official documentation\"\n                        link=\"https://www.npmjs.com/package/react-cropper\"\n                    />\n                </Col>\n            </Row>\n            <Row>\n                <Col sm={12}>\n                    <Card>\n                        <Card.Header>\n                            <h5>Image Cropper Plugin</h5>\n                        </Card.Header>\n                        <Card.Body>\n                            <Row className=\"justify-content-between\">\n                                <Col>\n                                    <input type=\"file\" onChange={onChange} />\n                                </Col>\n                                <Col>\n                                    <div className=\"float-right\">\n                                        <Button onClick={() => setImage(defaultSrc)}>Use default img</Button>\n                                    </div>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col sm={12} className=\"mt-3\">\n                                    <Cropper\n                                        style={{ height: 400, width: '100%' }}\n                                        initialAspectRatio={1}\n                                        preview=\".img-preview\"\n                                        src={image}\n                                        viewMode={1}\n                                        guides={true}\n                                        minCropBoxHeight={10}\n                                        minCropBoxWidth={10}\n                                        background={false}\n                                        responsive={true}\n                                        autoCropArea={1}\n                                        checkOrientation={false} // https://github.com/fengyuanchen/cropperjs/issues/671\n                                        onInitialized={(instance) => {\n                                            setCropper(instance);\n                                        }}\n                                    />\n                                </Col>\n                            </Row>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col sm={12}>\n                    <Button\n                        onClick={() => {\n                            getCropData();\n                            handleShow();\n                        }}\n                    >\n                        Crop Image\n                    </Button>\n                </Col>\n                <Modal show={show} onHide={handleClose}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Croped Image</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <img style={{ width: '100%', height: 'auto' }} src={cropData} alt=\"cropped\" />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={handleClose}>\n                            Close\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </Row>\n        </React.Fragment>\n    );\n};\n\nexport default ImageCropper;\n","import React from 'react';\nimport { Alert } from 'react-bootstrap';\n\nconst Notification = (props) => {\n    return (\n        <React.Fragment>\n            <Alert variant=\"warning\">\n                {props.message}\n                <Alert.Link href={props.link} target=\"_blank\" className=\"float-right\">\n                    Demo & Documentation\n                </Alert.Link>\n            </Alert>\n        </React.Fragment>\n    );\n};\n\nexport default Notification;\n","export default __webpack_public_path__ + \"static/media/l1.b0d3fde5.jpg\";"],"sourceRoot":""}