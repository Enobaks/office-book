{"version":3,"sources":["views/tables/react-table/Grouping.js","components/Widgets/Statistic/Notification.js","../node_modules/react-bootstrap/esm/CloseButton.js","../node_modules/react-bootstrap/esm/Alert.js","data/tableData.js"],"names":["Table","columns","data","useTable","useGroupBy","useExpanded","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","firstPageRows","slice","Legend","striped","bordered","hover","responsive","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","canGroupBy","getGroupByToggleProps","isGrouped","render","row","i","getRowProps","cells","cell","getCellProps","style","background","isAggregated","isPlaceholder","getToggleRowExpandedProps","isExpanded","subRows","length","padding","display","roundedMedian","leafValues","min","max","forEach","value","Math","round","App","React","useMemo","Header","accessor","aggregate","Aggregated","makeData","Fragment","sm","message","link","Title","as","Body","Notification","props","variant","Link","href","target","className","_excluded","propTypes","label","PropTypes","string","isRequired","onClick","func","CloseButton","forwardRef","_ref","ref","_objectWithoutPropertiesLoose","createElement","_extends","type","classNames","displayName","defaultProps","DivStyledAsH4","divWithClassName","AlertHeading","createWithBsPrefix","Component","AlertLink","SafeAnchor","show","transition","Fade","closeLabel","Alert","uncontrolledProps","_useUncontrolled","useUncontrolled","bsPrefix","children","onClose","dismissible","prefix","useBootstrapPrefix","handleClose","useEventCallback","e","Transition","alert","role","undefined","unmountOnExit","in","Heading","range","len","arr","push","newPerson","statusChance","random","firstName","namor","generate","words","numbers","lastName","age","floor","visits","progress","status","lens","makeDataLevel","depth","d"],"mappings":"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","file":"static/js/41.70967c29.chunk.js","sourcesContent":["import React from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\nimport BTable from 'react-bootstrap/Table';\nimport { useTable, useGroupBy, useExpanded } from 'react-table';\n\nimport makeData from '../../../data/tableData';\nimport ModuleNotification from '../../../components/Widgets/Statistic/Notification';\n\nfunction Table({ columns, data }) {\n    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable(\n        {\n            columns,\n            data\n        },\n        useGroupBy,\n        useExpanded // useGroupBy would be pretty useless without useExpanded ;)\n    );\n\n    // We don't want to render all of the rows for this example, so cap\n    // it at 100 for this use case\n    const firstPageRows = rows.slice(0, 20);\n\n    return (\n        <>\n            <Legend />\n            <BTable striped bordered hover responsive {...getTableProps()}>\n                <thead>\n                    {headerGroups.map((headerGroup) => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map((column) => (\n                                <th {...column.getHeaderProps()}>\n                                    {column.canGroupBy ? (\n                                        // If the column can be grouped, let's add a toggle\n                                        <span {...column.getGroupByToggleProps()}>{column.isGrouped ? 'ðŸ›‘ ' : 'ðŸ‘Š '}</span>\n                                    ) : null}\n                                    {column.render('Header')}\n                                </th>\n                            ))}\n                        </tr>\n                    ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                    {firstPageRows.map((row, i) => {\n                        prepareRow(row);\n                        return (\n                            <tr {...row.getRowProps()}>\n                                {row.cells.map((cell) => {\n                                    return (\n                                        <td\n                                            // For educational purposes, let's color the\n                                            // cell depending on what type it is given\n                                            // from the useGroupBy hook\n                                            {...cell.getCellProps()}\n                                            style={{\n                                                background: cell.isGrouped\n                                                    ? '#d5f7f0'\n                                                    : cell.isAggregated\n                                                    ? '#fff0db'\n                                                    : cell.isPlaceholder\n                                                    ? '#ffdde2'\n                                                    : '#fff'\n                                            }}\n                                        >\n                                            {cell.isGrouped ? (\n                                                // If it's a grouped cell, add an expander and row count\n                                                <>\n                                                    <span {...row.getToggleRowExpandedProps()}>{row.isExpanded ? 'ðŸ‘‡' : 'ðŸ‘‰'}</span>{' '}\n                                                    {cell.render('Cell')} ({row.subRows.length})\n                                                </>\n                                            ) : cell.isAggregated ? (\n                                                // If the cell is aggregated, use the Aggregated\n                                                // renderer for cell\n                                                cell.render('Aggregated')\n                                            ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\n                                                // Otherwise, just render the regular cell\n                                                cell.render('Cell')\n                                            )}\n                                        </td>\n                                    );\n                                })}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </BTable>\n        </>\n    );\n}\n\nfunction Legend() {\n    return (\n        <div\n            style={{\n                padding: '0.5rem 0'\n            }}\n        >\n            <span\n                style={{\n                    display: 'inline-block',\n                    background: '#d5f7f0',\n                    padding: '0.5rem'\n                }}\n            >\n                Grouped\n            </span>{' '}\n            <span\n                style={{\n                    display: 'inline-block',\n                    background: '#fff0db',\n                    padding: '0.5rem'\n                }}\n            >\n                Aggregated\n            </span>{' '}\n            <span\n                style={{\n                    display: 'inline-block',\n                    background: '#ffdde2',\n                    padding: '0.5rem'\n                }}\n            >\n                Repeated Value\n            </span>\n        </div>\n    );\n}\n\n// This is a custom aggregator that\n// takes in an array of leaf values and\n// returns the rounded median\nfunction roundedMedian(leafValues) {\n    let min = leafValues[0] || 0;\n    let max = leafValues[0] || 0;\n\n    leafValues.forEach((value) => {\n        min = Math.min(min, value);\n        max = Math.max(max, value);\n    });\n\n    return Math.round((min + max) / 2);\n}\n\nfunction App() {\n    const columns = React.useMemo(\n        () => [\n            {\n                Header: 'Name',\n                columns: [\n                    {\n                        Header: 'First Name',\n                        accessor: 'firstName',\n                        // Use a two-stage aggregator here to first\n                        // count the total rows being aggregated,\n                        // then sum any of those counts if they are\n                        // aggregated further\n                        aggregate: 'count',\n                        Aggregated: ({ value }) => `${value} Names`\n                    },\n                    {\n                        Header: 'Last Name',\n                        accessor: 'lastName',\n                        // Use another two-stage aggregator here to\n                        // first count the UNIQUE values from the rows\n                        // being aggregated, then sum those counts if\n                        // they are aggregated further\n                        aggregate: 'uniqueCount',\n                        Aggregated: ({ value }) => `${value} Unique Names`\n                    }\n                ]\n            },\n            {\n                Header: 'Info',\n                columns: [\n                    {\n                        Header: 'Age',\n                        accessor: 'age',\n                        // Aggregate the average age of visitors\n                        aggregate: 'average',\n                        Aggregated: ({ value }) => `${Math.round(value * 100) / 100} (avg)`\n                    },\n                    {\n                        Header: 'Visits',\n                        accessor: 'visits',\n                        // Aggregate the sum of all visits\n                        aggregate: 'sum',\n                        Aggregated: ({ value }) => `${value} (total)`\n                    },\n                    {\n                        Header: 'Status',\n                        accessor: 'status'\n                    },\n                    {\n                        Header: 'Profile Progress',\n                        accessor: 'progress',\n                        // Use our custom roundedMedian aggregator\n                        aggregate: roundedMedian,\n                        Aggregated: ({ value }) => `${value} (med)`\n                    }\n                ]\n            }\n        ],\n        []\n    );\n\n    const data = React.useMemo(() => makeData(1000), []);\n\n    return (\n        <React.Fragment>\n            <Row>\n                <Col sm={12}>\n                    <ModuleNotification\n                        message=\"For more info please check the components's official documentation\"\n                        link=\"https://react-table.tanstack.com/\"\n                    />\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Header>\n                            <Card.Title as=\"h5\">Grouping Table</Card.Title>\n                        </Card.Header>\n                        <Card.Body>\n                            <Table columns={columns} data={data} />\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport { Alert } from 'react-bootstrap';\n\nconst Notification = (props) => {\n    return (\n        <React.Fragment>\n            <Alert variant=\"warning\">\n                {props.message}\n                <Alert.Link href={props.link} target=\"_blank\" className=\"float-right\">\n                    Demo & Documentation\n                </Alert.Link>\n            </Alert>\n        </React.Fragment>\n    );\n};\n\nexport default Notification;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"label\", \"onClick\", \"className\"];\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\nvar propTypes = {\n  label: PropTypes.string.isRequired,\n  onClick: PropTypes.func\n};\nvar defaultProps = {\n  label: 'Close'\n};\nvar CloseButton = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var label = _ref.label,\n      onClick = _ref.onClick,\n      className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"button\", _extends({\n    ref: ref,\n    type: \"button\",\n    className: classNames('close', className),\n    onClick: onClick\n  }, props), /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, \"\\xD7\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\"\n  }, label));\n});\nCloseButton.displayName = 'CloseButton';\nCloseButton.propTypes = propTypes;\nCloseButton.defaultProps = defaultProps;\nexport default CloseButton;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"bsPrefix\", \"show\", \"closeLabel\", \"className\", \"children\", \"variant\", \"onClose\", \"dismissible\", \"transition\"];\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Fade from './Fade';\nimport CloseButton from './CloseButton';\nimport divWithClassName from './divWithClassName';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport SafeAnchor from './SafeAnchor';\nvar DivStyledAsH4 = divWithClassName('h4');\nDivStyledAsH4.displayName = 'DivStyledAsH4';\nvar AlertHeading = createWithBsPrefix('alert-heading', {\n  Component: DivStyledAsH4\n});\nvar AlertLink = createWithBsPrefix('alert-link', {\n  Component: SafeAnchor\n});\nvar defaultProps = {\n  show: true,\n  transition: Fade,\n  closeLabel: 'Close alert'\n};\nvar Alert = /*#__PURE__*/React.forwardRef(function (uncontrolledProps, ref) {\n  var _useUncontrolled = useUncontrolled(uncontrolledProps, {\n    show: 'onClose'\n  }),\n      bsPrefix = _useUncontrolled.bsPrefix,\n      show = _useUncontrolled.show,\n      closeLabel = _useUncontrolled.closeLabel,\n      className = _useUncontrolled.className,\n      children = _useUncontrolled.children,\n      variant = _useUncontrolled.variant,\n      onClose = _useUncontrolled.onClose,\n      dismissible = _useUncontrolled.dismissible,\n      transition = _useUncontrolled.transition,\n      props = _objectWithoutPropertiesLoose(_useUncontrolled, _excluded);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'alert');\n  var handleClose = useEventCallback(function (e) {\n    if (onClose) {\n      onClose(false, e);\n    }\n  });\n  var Transition = transition === true ? Fade : transition;\n  var alert = /*#__PURE__*/React.createElement(\"div\", _extends({\n    role: \"alert\"\n  }, !Transition ? props : undefined, {\n    ref: ref,\n    className: classNames(className, prefix, variant && prefix + \"-\" + variant, dismissible && prefix + \"-dismissible\")\n  }), dismissible && /*#__PURE__*/React.createElement(CloseButton, {\n    onClick: handleClose,\n    label: closeLabel\n  }), children);\n  if (!Transition) return show ? alert : null;\n  return /*#__PURE__*/React.createElement(Transition, _extends({\n    unmountOnExit: true\n  }, props, {\n    ref: undefined,\n    in: show\n  }), alert);\n});\nAlert.displayName = 'Alert';\nAlert.defaultProps = defaultProps;\nAlert.Link = AlertLink;\nAlert.Heading = AlertHeading;\nexport default Alert;","import namor from 'namor';\n\nconst range = (len) => {\n    const arr = [];\n    for (let i = 0; i < len; i++) {\n        arr.push(i);\n    }\n    return arr;\n};\n\nconst newPerson = () => {\n    const statusChance = Math.random();\n    return {\n        firstName: namor.generate({ words: 1, numbers: 0 }),\n        lastName: namor.generate({ words: 1, numbers: 0 }),\n        age: Math.floor(Math.random() * 30),\n        visits: Math.floor(Math.random() * 100),\n        progress: Math.floor(Math.random() * 100),\n        status: statusChance > 0.66 ? 'relationship' : statusChance > 0.33 ? 'complicated' : 'single'\n    };\n};\n\nexport default function makeData(...lens) {\n    const makeDataLevel = (depth = 0) => {\n        const len = lens[depth];\n        return range(len).map((d) => {\n            return {\n                ...newPerson(),\n                subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined\n            };\n        });\n    };\n\n    return makeDataLevel();\n}\n"],"sourceRoot":""}