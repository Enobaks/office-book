{"version":3,"sources":["views/forms/form-validation/FieldLevelValidationForm.js","views/forms/form-validation/SyncValidationForm.js","views/forms/form-validation/SubmitValidationForm.js","views/forms/form-validation/AsyncValidationForm.js","views/forms/form-validation/showResults.js","views/forms/form-validation/CombinedValidations.js","views/forms/FormsValidation.js","components/Widgets/Statistic/Notification.js"],"names":["max","min","renderField","input","label","type","meta","touched","error","warning","Row","className","Col","sm","placeholder","reduxForm","form","validate","values","errors","username","length","email","test","age","isNaN","Number","warn","warnings","props","handleSubmit","pristine","reset","submitting","Card","Header","Title","as","Body","onSubmit","Field","name","component","Footer","Button","variant","disabled","onClick","required","value","undefined","maxLength15","minLength2","number","minValue13","minValue","tooYoung","aol","alphaNumeric","phoneNumber","submit","ms","Promise","resolve","setTimeout","then","includes","SubmissionError","_error","password","window","alert","JSON","stringify","Subtitle","asyncValidating","asyncValidate","asyncChangeFields","sleep","a","Schema","Yup","shape","isRequired","message","CombinedValidations","validationSchema","initialValues","render","setFieldValue","setFieldTouched","validateField","validateForm","htmlFor","FormsValidation","Fragment","link","md","showResults","Notification","Link","href","target"],"mappings":"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","file":"static/js/164.3f83ec83.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, Button, Row, Col } from 'react-bootstrap';\nimport { Field, reduxForm } from 'redux-form';\n\nconst required = (value) => (value || typeof value === 'number' ? undefined : 'Required');\nconst maxLength = (max) => (value) => (value && value.length > max ? `Must be ${max} characters or less` : undefined);\nconst maxLength15 = maxLength(15);\nexport const minLength = (min) => (value) => (value && value.length < min ? `Must be ${min} characters or more` : undefined);\nexport const minLength2 = minLength(2);\nconst number = (value) => (value && isNaN(Number(value)) ? 'Must be a number' : undefined);\nconst minValue = (min) => (value) => (value && value < min ? `Must be at least ${min}` : undefined);\nconst minValue13 = minValue(13);\nconst email = (value) => (value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ? 'Invalid email address' : undefined);\nconst tooYoung = (value) => (value && value < 13 ? 'You do not meet the minimum age requirement!' : undefined);\nconst aol = (value) => (value && /.+@aol\\.com/.test(value) ? 'Really? You still use AOL for your email?' : undefined);\nconst alphaNumeric = (value) => (value && /[^a-zA-Z0-9 ]/i.test(value) ? 'Only alphanumeric characters' : undefined);\nexport const phoneNumber = (value) =>\n    value && !/^(0|[1-9][0-9]{9})$/i.test(value) ? 'Invalid phone number, must be 10 digits' : undefined;\n\nconst renderField = ({ input, label, type, meta: { touched, error, warning } }) => (\n    <Row className=\"my-3\">\n        <Col sm={3}>\n            <label className=\"label-control\">{label}</label>\n        </Col>\n        <Col sm={9}>\n            <input {...input} placeholder={label} type={type} className=\"form-control\" />\n            {touched &&\n                ((error && <span className=\"text-c-red\">* {error} </span>) ||\n                    (warning && <span className=\"text-c-yellow\">{warning}</span>))}\n        </Col>\n    </Row>\n);\n\nconst FieldLevelValidationForm = (props) => {\n    const { handleSubmit, pristine, reset, submitting } = props;\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title as=\"h5\">Field-Level Validation</Card.Title>\n            </Card.Header>\n            <Card.Body>\n                <form onSubmit={handleSubmit}>\n                    <Field\n                        name=\"username\"\n                        type=\"text\"\n                        component={renderField}\n                        label=\"Username\"\n                        validate={[required, maxLength15, minLength2]}\n                        warn={alphaNumeric}\n                    />\n                    <Field name=\"email\" type=\"email\" component={renderField} label=\"Email\" validate={email} warn={aol} />\n                    <Field\n                        name=\"age\"\n                        type=\"number\"\n                        component={renderField}\n                        label=\"Age\"\n                        validate={[required, number, minValue13]}\n                        warn={tooYoung}\n                    />\n                    <Field name=\"phone\" type=\"number\" component={renderField} label=\"Phone number\" validate={[required, phoneNumber]} />\n                </form>\n            </Card.Body>\n            <Card.Footer>\n                <Button variant=\"danger\" type=\"button\" className=\"float-right\" disabled={pristine || submitting} onClick={reset}>\n                    Clear Values\n                </Button>\n                <Button type=\"submit\" className=\"mr-1 float-right\" disabled={submitting}>\n                    Submit\n                </Button>\n            </Card.Footer>\n        </Card>\n    );\n};\n\nexport default reduxForm({\n    form: 'fieldLevelValidation' // a unique identifier for this form\n})(FieldLevelValidationForm);\n","import React from 'react';\nimport { Card, Button, Row, Col } from 'react-bootstrap';\nimport { Field, reduxForm } from 'redux-form';\n\nconst validate = (values) => {\n    const errors = {};\n    if (!values.username) {\n        errors.username = 'Required';\n    } else if (values.username.length > 15) {\n        errors.username = 'Must be 15 characters or less';\n    }\n    if (!values.email) {\n        errors.email = 'Required';\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = 'Invalid email address';\n    }\n    if (!values.age) {\n        errors.age = 'Required';\n    } else if (isNaN(Number(values.age))) {\n        errors.age = 'Must be a number';\n    } else if (Number(values.age) < 18) {\n        errors.age = 'Sorry, you must be at least 18 years old';\n    }\n    return errors;\n};\n\nconst warn = (values) => {\n    const warnings = {};\n    if (values.age < 19) {\n        warnings.age = 'Hmm, you seem a bit young...';\n    }\n    return warnings;\n};\n\nconst renderField = ({ input, label, type, meta: { touched, error, warning } }) => (\n    <Row className=\"my-3\">\n        <Col sm={3}>\n            <label className=\"label-control\">{label}</label>\n        </Col>\n        <Col sm={9}>\n            <input {...input} placeholder={label} type={type} className=\"form-control\" />\n            {touched &&\n                ((error && <span className=\"text-c-red\">* {error} </span>) ||\n                    (warning && <span className=\"text-c-yellow\">{warning}</span>))}\n        </Col>\n    </Row>\n);\n\nconst SyncValidationForm = (props) => {\n    const { handleSubmit, pristine, reset, submitting } = props;\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title as=\"h5\">Synchronous Validation</Card.Title>\n            </Card.Header>\n            <Card.Body>\n                <form onSubmit={handleSubmit}>\n                    <Field name=\"username\" type=\"text\" component={renderField} label=\"Username\" />\n                    <Field className=\"form-control\" name=\"email\" type=\"email\" component={renderField} label=\"Email\" />\n                    <Field className=\"form-control\" name=\"age\" type=\"number\" component={renderField} label=\"Age\" />\n                </form>\n            </Card.Body>\n            <Card.Footer>\n                <Button variant=\"danger\" className=\"float-right\" type=\"button\" disabled={pristine || submitting} onClick={reset}>\n                    Clear Values\n                </Button>\n                <Button type=\"submit\" disabled={submitting} className=\"mr-1 float-right\">\n                    Submit\n                </Button>\n            </Card.Footer>\n        </Card>\n    );\n};\n\nexport default reduxForm({\n    form: 'syncValidation', // a unique identifier for this form\n    validate, // <--- validation function given to redux-form\n    warn // <--- warning function given to redux-form\n})(SyncValidationForm);\n","import React from 'react';\nimport { Card, Button, Row, Col } from 'react-bootstrap';\nimport { SubmissionError, Field, reduxForm } from 'redux-form';\n\nconst sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst submit = (values) => {\n    return sleep(1000).then(() => {\n        // simulate server latency\n        if (!['john', 'paul', 'george', 'ringo'].includes(values.username)) {\n            throw new SubmissionError({\n                username: 'User does not exist',\n                _error: 'Login failed!'\n            });\n        } else if (values.password !== '123456') {\n            throw new SubmissionError({\n                password: 'Wrong password',\n                _error: 'Login failed!'\n            });\n        } else {\n            window.alert(`You submitted:\\n\\n${JSON.stringify(values, null, 2)}`);\n        }\n    });\n};\n\nconst renderField = ({ input, label, type, meta: { touched, error } }) => (\n    <Row className=\"my-3\">\n        <Col sm={3}>\n            <label className=\"label-control\">{label}</label>\n        </Col>\n        <Col sm={9}>\n            <input {...input} placeholder={label} type={type} className=\"form-control\" />\n            {touched && error && <span className=\"text-c-red\">* {error} </span>}\n        </Col>\n    </Row>\n);\n\nconst SubmitValidationForm = (props) => {\n    const { error, handleSubmit, pristine, reset, submitting } = props;\n    return (\n        <form onSubmit={handleSubmit(submit)}>\n            <Card>\n                <Card.Header>\n                    <Card.Title as=\"h5\">Submit Validation</Card.Title>\n                    <Card.Subtitle className=\"mt-2 text-muted\">Usernames: john, paul, george, ringo</Card.Subtitle>\n                    <Card.Subtitle className=\"mt-2 text-muted\">Password: 123456</Card.Subtitle>\n                </Card.Header>\n                <Card.Body>\n                    <Field name=\"username\" type=\"text\" component={renderField} label=\"Username\" />\n                    <Field name=\"password\" type=\"password\" component={renderField} label=\"Password\" />\n                    {error && <strong>{error}</strong>}\n                </Card.Body>\n                <Card.Footer>\n                    <Button type=\"button\" variant=\"danger\" className=\"float-right\" disabled={pristine || submitting} onClick={reset}>\n                        Clear Values\n                    </Button>\n                    <Button type=\"submit\" className=\"mr-1 float-right\" disabled={submitting}>\n                        Log In\n                    </Button>\n                </Card.Footer>\n            </Card>\n        </form>\n    );\n};\n\nexport default reduxForm({\n    form: 'submitValidation' // a unique identifier for this form\n})(SubmitValidationForm);\n","import React from 'react';\nimport { Card, Button, Row, Col } from 'react-bootstrap';\nimport { Field, reduxForm } from 'redux-form';\n\nconst validate = (values) => {\n    const errors = {};\n    if (!values.username) {\n        errors.username = 'Required';\n    }\n    if (!values.password) {\n        errors.password = 'Required';\n    }\n    return errors;\n};\n\nconst sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst asyncValidate = (values /*, dispatch */) => {\n    return sleep(1000).then(() => {\n        // simulate server latency\n        if (['john', 'paul', 'george', 'ringo'].includes(values.username)) {\n            // eslint-disable-next-line\n            throw { username: 'That username is taken' };\n        }\n    });\n};\n\nconst renderField = ({ input, label, type, meta: { asyncValidating, touched, error } }) => (\n    <Row className=\"my-3\">\n        <Col sm={3}>\n            <label className=\"label-control\">{label}</label>\n        </Col>\n        <Col sm={9} className={asyncValidating ? 'async-validating' : ''}>\n            <input {...input} placeholder={label} type={type} className=\"form-control\" />\n            {touched && error && <span className=\"text-c-red\">* {error} </span>}\n        </Col>\n    </Row>\n);\n\nconst AsyncValidationForm = (props) => {\n    const { handleSubmit, pristine, reset, submitting } = props;\n    return (\n        <form onSubmit={handleSubmit}>\n            <Card>\n                <Card.Header>\n                    <Card.Title as=\"h5\">Asynchronous Validation</Card.Title>\n                </Card.Header>\n                <Card.Body>\n                    <Field name=\"username\" type=\"text\" component={renderField} label=\"Username\" />\n                    <Field name=\"password\" type=\"password\" component={renderField} label=\"Password\" />\n                </Card.Body>\n                <Card.Footer>\n                    <Button type=\"button\" variant=\"danger\" className=\"float-right\" disabled={pristine || submitting} onClick={reset}>\n                        Clear Values\n                    </Button>\n                    <Button type=\"submit\" className=\"mr-1 float-right\" disabled={submitting}>\n                        Sign Up\n                    </Button>\n                </Card.Footer>\n            </Card>\n        </form>\n    );\n};\n\nexport default reduxForm({\n    form: 'asyncValidation', // a unique identifier for this form\n    validate,\n    asyncValidate,\n    asyncChangeFields: ['username']\n})(AsyncValidationForm);\n","const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nexport default (async function showResults(values) {\n    await sleep(500); // simulate server latency\n    window.alert(`You submitted:\\n\\n${JSON.stringify(values, null, 2)}`);\n});\n","import React from 'react';\nimport { Button, Row, Col } from 'react-bootstrap';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Card } from 'react-bootstrap';\n\nconst Schema = Yup.object().shape({\n    email: Yup.string().required('This field is required')\n});\n\n// Async Validation\nconst sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst validate = (values) =>\n    sleep(300).then(() => {\n        return false;\n    });\n\nconst isRequired = (message) => (value) => (!!value ? undefined : message);\n\nconst CombinedValidations = () => (\n    <Card>\n        <Card.Header>\n            <Card.Title as=\"h5\">Formik - Pick a Username</Card.Title>\n        </Card.Header>\n        <Card.Body>\n            <Formik\n                validationSchema={Schema}\n                validate={validate}\n                initialValues={{\n                    username: '',\n                    email: ''\n                }}\n                onSubmit={(values) => {\n                    sleep(500).then(() => {\n                        alert(JSON.stringify(values, null, 2));\n                    });\n                }}\n                render={({ errors, touched, setFieldValue, setFieldTouched, validateField, validateForm }) => (\n                    <Form>\n                        <Row>\n                            <Col sm={3}>\n                                <label htmlFor=\"username\">Username</label>\n                            </Col>\n                            <Col sm={9}>\n                                <Field\n                                    className=\"form-control\"\n                                    name=\"username\"\n                                    validate={isRequired('This field is required')}\n                                    type=\"text\"\n                                    placeholder=\"username\"\n                                />\n                                <ErrorMessage className=\"text-c-red\" name=\"username\" />\n                            </Col>\n                        </Row>\n                        <Row className=\"my-3\">\n                            <Col sm={3}>\n                                <label htmlFor=\"username\">Email</label>\n                            </Col>\n                            <Col sm={9}>\n                                <Field\n                                    className=\"form-control\"\n                                    name=\"email\"\n                                    validate={isRequired('This field is required')}\n                                    type=\"text\"\n                                    placeholder=\"email\"\n                                />\n                                <ErrorMessage className=\"text-c-red\" name=\"email\" />\n                            </Col>\n                        </Row>\n                        <Button type=\"submit\">Submit</Button>\n                    </Form>\n                )}\n            />\n        </Card.Body>\n    </Card>\n);\n\nexport default CombinedValidations;\n","import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport SyncValidationForm from './form-validation/SyncValidationForm';\nimport FieldLevelValidationForm from './form-validation/FieldLevelValidationForm';\nimport SubmitValidationForm from './form-validation/SubmitValidationForm';\nimport AsyncValidationForm from './form-validation/AsyncValidationForm';\nimport showResults from './form-validation/showResults';\nimport CombinedValidations from './form-validation/CombinedValidations';\n\nimport ModuleNotification from '../../components/Widgets/Statistic/Notification';\n\nconst FormsValidation = () => {\n    return (\n        <React.Fragment>\n            <Row>\n                <Col sm={12}>\n                    <ModuleNotification\n                        message=\"For more info please check the components's official documentation\"\n                        link=\"https://redux-form.com/8.2.2/docs/gettingstarted.md/\"\n                    />\n                </Col>\n            </Row>\n            <Row>\n                <Col sm={12} md={6}>\n                    <SyncValidationForm />\n                </Col>\n                <Col sm={12} md={6}>\n                    <AsyncValidationForm onSubmit={showResults} />\n                </Col>\n                <Col sm={12} md={6}>\n                    <FieldLevelValidationForm />\n                </Col>\n                <Col sm={12} md={6}>\n                    <SubmitValidationForm />\n                </Col>\n                <Col sm={12}>\n                    <ModuleNotification\n                        message=\"For more info please check the components's official documentation\"\n                        link=\"https://formik.org/docs/overview\"\n                    />\n                </Col>\n                <Col sm={12}>\n                    <CombinedValidations />\n                </Col>\n            </Row>\n        </React.Fragment>\n    );\n};\n\nexport default FormsValidation;\n","import React from 'react';\nimport { Alert } from 'react-bootstrap';\n\nconst Notification = (props) => {\n    return (\n        <React.Fragment>\n            <Alert variant=\"warning\">\n                {props.message}\n                <Alert.Link href={props.link} target=\"_blank\" className=\"float-right\">\n                    Demo & Documentation\n                </Alert.Link>\n            </Alert>\n        </React.Fragment>\n    );\n};\n\nexport default Notification;\n"],"sourceRoot":""}