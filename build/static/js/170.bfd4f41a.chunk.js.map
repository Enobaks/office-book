{"version":3,"sources":["components/Notifications/BasicNotifications.js","views/ui-elements/advance/AdvanceNotification.js","components/Widgets/Statistic/Notification.js"],"names":["AlertMessage","appearance","children","onDismiss","Alert","variant","dismissible","onClose","BasicNotifications","props","Fragment","components","Toast","placement","notification","add","onClick","message","autoDismiss","colourOptions","value","label","color","potionOption","dot","alignItems","display","backgroundColor","borderRadius","content","marginRight","height","width","colourStyles","control","styles","option","data","isDisabled","isFocused","isSelected","chroma","alpha","css","contrast","cursor","input","placeholder","singleValue","AdvanceNotification","useState","setVariant","setPlacement","setAutoDismiss","setMessage","Row","Col","sm","link","Card","Header","Title","as","Body","className","md","Form","Group","controlId","Label","defaultValue","options","onChange","type","id","checked","prevState","htmlFor","Control","rows","event","target","Button","Notification","Link","href"],"mappings":"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","file":"static/js/170.bfd4f41a.chunk.js","sourcesContent":["import React from 'react';\nimport { Alert } from 'react-bootstrap';\nimport { ToastProvider, ToastConsumer } from 'react-toast-notifications';\n\nconst AlertMessage = ({ appearance, children, onDismiss }) => {\n    return (\n        <Alert variant={appearance} dismissible onClose={onDismiss}>\n            {children}\n        </Alert>\n    );\n};\n\nconst BasicNotifications = (props) => {\n    return (\n        <React.Fragment>\n            <ToastProvider components={{ Toast: AlertMessage }} placement={props.notification.placement}>\n                <ToastConsumer>\n                    {({ add }) => {\n                        return (\n                            <span\n                                onClick={() =>\n                                    add(props.notification.message, {\n                                        appearance: props.notification.variant,\n                                        autoDismiss: props.notification.autoDismiss\n                                    })\n                                }\n                            >\n                                {props.children}\n                            </span>\n                        );\n                    }}\n                </ToastConsumer>\n            </ToastProvider>\n        </React.Fragment>\n    );\n};\n\nexport default BasicNotifications;\n","import React, { useState } from 'react';\nimport { Row, Col, Card, Button, Form } from 'react-bootstrap';\nimport chroma from 'chroma-js';\nimport Select from 'react-select';\n\nimport Notifications from '../../../components/Notifications/BasicNotifications';\nimport ModuleNotification from '../../../components/Widgets/Statistic/Notification';\n\nconst colourOptions = [\n    { value: 'inverse', label: 'Inverse', color: '#333' },\n    { value: 'primary', label: 'Primary', color: '#04a9f5' },\n    { value: 'info', label: 'Info', color: '#3ebfea' },\n    { value: 'success', label: 'Success', color: '#1de9b6' },\n    { value: 'warning', label: 'Warning', color: '#f4c22b' },\n    { value: 'danger', label: 'Danger', color: '#f44236' },\n    { value: 'dark', label: 'Dark', color: '#c7cbce' },\n    { value: 'light', label: 'Light', color: '#f2f2f2' }\n];\n\nconst potionOption = [\n    { value: 'top-left', label: 'Top Left' },\n    { value: 'top-right', label: 'Top Right' },\n    { value: 'top-center', label: 'Top Center' },\n    { value: 'bottom-left', label: 'Bottom Left' },\n    { value: 'bottom-right', label: 'Bottom Right' },\n    { value: 'bottom-center', label: 'Bottom Center' }\n];\n\nconst dot = (color = '#ccc') => ({\n    alignItems: 'center',\n    display: 'flex',\n\n    ':before': {\n        backgroundColor: color,\n        borderRadius: 10,\n        content: '\" \"',\n        display: 'block',\n        marginRight: 8,\n        height: 10,\n        width: 10\n    }\n});\n\nconst colourStyles = {\n    control: (styles) => ({ ...styles, backgroundColor: 'white' }),\n    option: (styles, { data, isDisabled, isFocused, isSelected }) => {\n        const color = chroma(data.color);\n        return {\n            ...styles,\n            backgroundColor: isDisabled ? null : isSelected ? data.color : isFocused ? color.alpha(0.1).css() : null,\n            color: isDisabled ? '#ccc' : isSelected ? (chroma.contrast(color, 'white') > 2 ? 'white' : 'black') : data.color,\n            cursor: isDisabled ? 'not-allowed' : 'default'\n        };\n    },\n    input: (styles) => ({ ...styles, ...dot() }),\n    placeholder: (styles) => ({ ...styles, ...dot() }),\n    singleValue: (styles, { data }) => ({ ...styles, ...dot(data.color) })\n};\n\nconst AdvanceNotification = () => {\n    const [variant, setVariant] = useState('inverse');\n    const [placement, setPlacement] = useState('top-right');\n    const [autoDismiss, setAutoDismiss] = useState(true);\n    const [message, setMessage] = useState('Bootstrap Growl Turning standard Bootstrap alerts into awesome notification');\n\n    const handleChange = (event) => {\n        setMessage(event.target.value);\n    };\n\n    return (\n        <React.Fragment>\n            <Row>\n                <Col sm={12}>\n                    <ModuleNotification\n                        message=\"For more info please check the components's official documentation\"\n                        link=\"https://www.npmjs.com/package/react-toast-notifications\"\n                    />\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Header>\n                            <Card.Title as=\"h5\">Growl Notification</Card.Title>\n                        </Card.Header>\n                        <Card.Body>\n                            <Row className=\"justify-content-md-center\">\n                                <Col sm={12} md={7}>\n                                    <Form.Group controlId=\"formPosition\">\n                                        <Form.Label>Position Variant</Form.Label>\n                                        <Select\n                                            defaultValue={potionOption[1]}\n                                            label=\"Select Position\"\n                                            options={potionOption}\n                                            onChange={({ value }) => setPlacement(value)}\n                                        />\n                                    </Form.Group>\n                                    <Form.Group controlId=\"formColor\">\n                                        <Form.Label>Color Variant</Form.Label>\n                                        <Select\n                                            defaultValue={colourOptions[0]}\n                                            label=\"Select Variant\"\n                                            options={colourOptions}\n                                            styles={colourStyles}\n                                            onChange={({ value }) => setVariant(value)}\n                                        />\n                                    </Form.Group>\n                                    <Form.Group controlId=\"formBasicEmail\">\n                                        <div className=\"switch switch-primary d-inline m-r-10\">\n                                            <input\n                                                type=\"checkbox\"\n                                                id=\"icon-colored\"\n                                                checked={autoDismiss}\n                                                onChange={() => setAutoDismiss((prevState) => !prevState)}\n                                            />\n                                            <label htmlFor=\"icon-colored\" className=\"cr\" />\n                                        </div>\n                                        <Form.Label>Auto Dismiss</Form.Label>\n                                    </Form.Group>\n                                    <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                                        <Form.Label>Message</Form.Label>\n                                        <Form.Control as=\"textarea\" rows=\"3\" value={message} onChange={handleChange} />\n                                    </Form.Group>\n                                    <Notifications\n                                        notification={{\n                                            variant: variant,\n                                            placement: placement,\n                                            autoDismiss: autoDismiss,\n                                            message: message\n                                        }}\n                                    >\n                                        <Button>Add Notification</Button>\n                                    </Notifications>\n                                </Col>\n                            </Row>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </React.Fragment>\n    );\n};\n\nexport default AdvanceNotification;\n","import React from 'react';\nimport { Alert } from 'react-bootstrap';\n\nconst Notification = (props) => {\n    return (\n        <React.Fragment>\n            <Alert variant=\"warning\">\n                {props.message}\n                <Alert.Link href={props.link} target=\"_blank\" className=\"float-right\">\n                    Demo & Documentation\n                </Alert.Link>\n            </Alert>\n        </React.Fragment>\n    );\n};\n\nexport default Notification;\n"],"sourceRoot":""}