{"version":3,"sources":["views/ui-elements/advance/AdvanceTour.js","components/Widgets/Statistic/Notification.js","components/Card/MainCard.js"],"names":["stepsTour","selector","content","stepsRide","placement","locale","skip","target","AdvanceTour","useState","isTourOpen","setIsTourOpen","run","setRun","steps","Fragment","sm","message","link","className","Header","Title","as","Body","onClick","isOpen","onRequestClose","callback","data","status","STATUS","FINISHED","SKIPPED","includes","continuous","scrollToFirstStep","showProgress","showSkipButton","styles","options","zIndex","isOption","title","cardClass","optionClass","Text","Notification","props","variant","Link","href","MainCard","fullScreenStyle","loader","cardHeaderRight","cardHeader","card","children","fullCard","setFullCard","collapseCard","setCollapseCard","loadCard","setloadCard","cardRemove","setCardRemove","windowSize","useWindowSize","mainCardClass","alignRight","Toggle","id","Menu","Item","to","setInterval","position","top","left","right","width","height","join","style","in"],"mappings":"yRAQMA,EAAY,CACd,CACIC,SAAU,UACVC,QAAS,0CAEb,CACID,SAAU,eACVC,QAAS,gCAEb,CACID,SAAU,kBACVC,QAAS,qCAEb,CACID,SAAU,eACVC,QAAS,qCAEb,CACID,SAAU,uBACVC,QAAS,iBAIXC,EAAY,CACd,CACID,QAAS,0DACTE,UAAW,SACXC,OAAQ,CAAEC,KAAM,wBAAQ,aAAW,OAAnB,sBAChBC,OAAQ,QAEZ,CACIA,OAAQ,UACRL,QAAS,yCACTE,UAAW,OAEf,CACIG,OAAQ,eACRL,QAAS,gCAEb,CACIK,OAAQ,kBACRL,QAAS,qCAEb,CACIK,OAAQ,eACRL,QAAS,qCAEb,CACIK,OAAQ,uBACRL,QAAS,iBAqEFM,UAjEK,WAChB,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAsBF,oBAAS,GAA/B,mBAAOG,EAAP,KAAYC,EAAZ,KACA,EAAgBJ,mBAASN,GAAlBW,EAAP,oBAUA,OACI,eAAC,IAAMC,SAAP,WACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAKC,GAAI,GAAT,SACI,cAAC,IAAD,CACIC,QAAQ,qEACRC,KAAK,oDAIjB,cAAC,IAAD,CAAKC,UAAU,WAAf,SACI,eAAC,IAAD,WACI,eAAC,IAAD,WACI,cAAC,IAAKC,OAAN,UACI,cAAC,IAAKC,MAAN,CAAYC,GAAG,KAAf,oBAEJ,eAAC,IAAKC,KAAN,WACI,cAAC,IAAD,CAAQC,QAAS,kBAAMb,GAAc,IAArC,8BACA,cAAC,IAAD,CAAQa,QAAS,kBAAMX,GAAO,IAA9B,sBACA,cAAC,IAAD,CAAMC,MAAOd,EAAWyB,OAAQf,EAAYgB,eAAgB,kBAAMf,GAAc,MAChF,cAAC,IAAD,CACIgB,SA7BE,SAACC,GAC3B,IAAQC,EAAWD,EAAXC,OAEJ,CAACC,IAAOC,SAAUD,IAAOE,SAASC,SAASJ,IAC3ChB,GAAO,IA0BaD,IAAKA,EACLsB,YAAU,EACVC,mBAAiB,EACjBC,cAAY,EACZC,gBAAc,EACdvB,MAAOA,EACPwB,OAAQ,CACJC,QAAS,CACLC,OAAQ,cAM5B,eAAC,IAAD,CAAUC,UAAQ,EAACC,MAAM,aAAaC,UAAU,mBAAmBC,YAAY,cAA/E,UACI,kDACA,kDACA,kDACA,kDACA,kDACA,kDACA,cAAC,IAAKC,KAAN,sCACA,cAAC,IAAKA,KAAN,mD,iCCtHxB,oCAgBeC,IAbM,SAACC,GAClB,OACI,cAAC,IAAMhC,SAAP,UACI,eAAC,IAAD,CAAOiC,QAAQ,UAAf,UACKD,EAAM9B,QACP,cAAC,IAAMgC,KAAP,CAAYC,KAAMH,EAAM7B,KAAMX,OAAO,SAASY,UAAU,cAAxD,yC,sHCiGDgC,IAnGE,SAACJ,GACd,IAoBIK,EAAiBC,EAAQC,EAAiBC,EAC1CC,EArBIf,EAAsDM,EAAtDN,SAAUC,EAA4CK,EAA5CL,MAAOe,EAAqCV,EAArCU,SAAUd,EAA2BI,EAA3BJ,UAAWC,EAAgBG,EAAhBH,YAE9C,EAAgCnC,oBAAS,GAAzC,mBAAOiD,EAAP,KAAiBC,EAAjB,KACA,EAAwClD,oBAAS,GAAjD,mBAAOmD,EAAP,KAAqBC,EAArB,KACA,EAAgCpD,oBAAS,GAAzC,mBAAOqD,EAAP,KAAiBC,EAAjB,KACA,EAAoCtD,oBAAS,GAA7C,mBAAOuD,EAAP,KAAmBC,EAAnB,KAEMC,EAAaC,cAefC,EAAgB,GAyEpB,OAvEI3B,IACAa,EACI,qBAAKnC,UAAW,qBAAuByB,EAAvC,SACI,eAAC,IAAD,CAAUyB,YAAY,EAAMlD,UAAU,wBAAtC,UACI,cAAC,IAASmD,OAAV,CAAiBC,GAAG,iBAAiBpD,UAAU,WAA/C,SACI,mBAAGA,UAAU,mCAEjB,eAAC,IAASqD,KAAV,CAAelD,GAAG,KAAKH,UAAU,4BAAjC,UACI,eAAC,IAASsD,KAAV,CAAenD,GAAG,KAAKH,UAAU,gBAAgBK,QAAS,kBAAMmC,GAAaD,IAA7E,UACI,mBAAGvC,UAAWuC,EAAW,wBAA0B,0BACnD,eAAC,IAAD,CAAMgB,GAAG,IAAT,cAAehB,EAAW,UAAY,WAAtC,UAEJ,eAAC,IAASe,KAAV,CAAenD,GAAG,KAAKH,UAAU,gBAAgBK,QAAS,kBAAMqC,GAAiBD,IAAjF,UACI,mBAAGzC,UAAWyC,EAAe,oBAAsB,uBACnD,eAAC,IAAD,CAAMc,GAAG,IAAT,cAAed,EAAe,SAAW,WAAzC,UAEJ,eAAC,IAASa,KAAV,CAAenD,GAAG,KAAKH,UAAU,gBAAgBK,QA/B3C,WACtBuC,GAAY,GACZY,aAAY,WACRZ,GAAY,KACb,MA2Ba,UACI,mBAAG5C,UAAU,4BACb,cAAC,IAAD,CAAMuD,GAAG,IAAT,yBAEJ,eAAC,IAASD,KAAV,CAAenD,GAAG,KAAKH,UAAU,gBAAgBK,QA5B3C,WACtByC,GAAc,IA2BE,UACI,mBAAG9C,UAAU,uBACb,cAAC,IAAD,CAAMuD,GAAG,IAAT,kCAQxBnB,EACI,eAAC,IAAKnC,OAAN,WACI,cAAC,IAAKC,MAAN,CAAYC,GAAG,KAAf,SAAqBoB,IACpBY,KAILI,IACAU,EAAa,sBAAOA,GAAP,CAAsB,cACnChB,EAAkB,CAAEwB,SAAU,QAASC,IAAK,EAAGC,KAAM,EAAGC,MAAO,EAAGC,MAAOd,EAAWc,MAAOC,OAAQf,EAAWe,SAG9GnB,IACAM,EAAa,sBAAOA,GAAP,CAAsB,cACnCf,EACI,qBAAKlC,UAAU,cAAf,SACI,mBAAGA,UAAU,+BAKrB6C,IACAI,EAAa,sBAAOA,GAAP,CAAsB,YAGnCzB,IACAyB,EAAa,sBAAOA,GAAP,CAAsBzB,KAGvCa,EACI,eAAC,IAAD,CAAMrC,UAAWiD,EAAcc,KAAK,KAAMC,MAAO/B,EAAjD,UACKG,EACD,cAAC,IAAD,CAAU6B,IAAKxB,EAAf,SACI,8BACI,cAAC,IAAKrC,KAAN,UAAYkC,QAGnBJ,KAIF,cAAC,IAAMtC,SAAP,UAAiByC","file":"static/js/141.050f2196.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Row, Col, Card, Button } from 'react-bootstrap';\nimport Tour from 'reactour';\nimport Joyride, { STATUS } from 'react-joyride';\nimport ModuleNotification from '../../../components/Widgets/Statistic/Notification';\n\nimport MainCard from '../../../components/Card/MainCard';\n\nconst stepsTour = [\n    {\n        selector: '.tour-1',\n        content: 'Click hear customize basic card layout'\n    },\n    {\n        selector: '.card-option',\n        content: 'Click hear open card options'\n    },\n    {\n        selector: '.displayChatbox',\n        content: 'Click chat open chat conversation'\n    },\n    {\n        selector: '.mobile-menu',\n        content: 'Click to see collapse menu layout'\n    },\n    {\n        selector: '.pcoded-menu-caption',\n        content: 'Menu caption'\n    }\n];\n\nconst stepsRide = [\n    {\n        content: <h5>Let's begin our journey!</h5>,\n        placement: 'center',\n        locale: { skip: <strong aria-label=\"skip\">S-K-I-P</strong> },\n        target: 'body'\n    },\n    {\n        target: '.tour-1',\n        content: 'Click hear customize basic card layout',\n        placement: 'top'\n    },\n    {\n        target: '.card-option',\n        content: 'Click hear open card options'\n    },\n    {\n        target: '.displayChatbox',\n        content: 'Click chat open chat conversation'\n    },\n    {\n        target: '.mobile-menu',\n        content: 'Click to see collapse menu layout'\n    },\n    {\n        target: '.pcoded-menu-caption',\n        content: 'Menu caption'\n    }\n];\n\nconst AdvanceTour = () => {\n    const [isTourOpen, setIsTourOpen] = useState(false);\n    const [run, setRun] = useState(false);\n    const [steps] = useState(stepsRide);\n\n    const handleJoyrideCallback = (data) => {\n        const { status } = data;\n\n        if ([STATUS.FINISHED, STATUS.SKIPPED].includes(status)) {\n            setRun(false);\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <Row>\n                <Col sm={12}>\n                    <ModuleNotification\n                        message=\"For more info please check the components's official documentation\"\n                        link=\"https://www.npmjs.com/package/react-joyride\"\n                    />\n                </Col>\n            </Row>\n            <Row className=\"btn-page\">\n                <Col>\n                    <Card>\n                        <Card.Header>\n                            <Card.Title as=\"h5\">Tour</Card.Title>\n                        </Card.Header>\n                        <Card.Body>\n                            <Button onClick={() => setIsTourOpen(true)}>Start Basic Tour</Button>\n                            <Button onClick={() => setRun(true)}>Joy Ride</Button>\n                            <Tour steps={stepsTour} isOpen={isTourOpen} onRequestClose={() => setIsTourOpen(false)} />\n                            <Joyride\n                                callback={handleJoyrideCallback}\n                                run={run}\n                                continuous\n                                scrollToFirstStep\n                                showProgress\n                                showSkipButton\n                                steps={steps}\n                                styles={{\n                                    options: {\n                                        zIndex: 10000\n                                    }\n                                }}\n                            />\n                        </Card.Body>\n                    </Card>\n                    <MainCard isOption title=\"Hello tour\" cardClass=\"tour-1 card-test\" optionClass=\"card-option\">\n                        <h1>H1 Gradient Able</h1>\n                        <h2>H2 Gradient Able</h2>\n                        <h3>H3 Gradient Able</h3>\n                        <h4>H4 Gradient Able</h4>\n                        <h5>H5 Gradient Able</h5>\n                        <h6>H6 Gradient Able</h6>\n                        <Card.Text>Paragraph Gradient Able</Card.Text>\n                        <Card.Text>Paragraph Gradient Able</Card.Text>\n                    </MainCard>\n                </Col>\n            </Row>\n        </React.Fragment>\n    );\n};\n\nexport default AdvanceTour;\n","import React from 'react';\nimport { Alert } from 'react-bootstrap';\n\nconst Notification = (props) => {\n    return (\n        <React.Fragment>\n            <Alert variant=\"warning\">\n                {props.message}\n                <Alert.Link href={props.link} target=\"_blank\" className=\"float-right\">\n                    Demo & Documentation\n                </Alert.Link>\n            </Alert>\n        </React.Fragment>\n    );\n};\n\nexport default Notification;\n","import React, { useState } from 'react';\nimport { Dropdown, Card, Collapse } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nimport useWindowSize from '../../hooks/useWindowSize';\n\nconst MainCard = (props) => {\n    const { isOption, title, children, cardClass, optionClass } = props;\n\n    const [fullCard, setFullCard] = useState(false);\n    const [collapseCard, setCollapseCard] = useState(false);\n    const [loadCard, setloadCard] = useState(false);\n    const [cardRemove, setCardRemove] = useState(false);\n\n    const windowSize = useWindowSize();\n\n    const cardReloadHandler = () => {\n        setloadCard(true);\n        setInterval(() => {\n            setloadCard(false);\n        }, 3000);\n    };\n\n    const cardRemoveHandler = () => {\n        setCardRemove(true);\n    };\n\n    let fullScreenStyle, loader, cardHeaderRight, cardHeader;\n    let card = '';\n    let mainCardClass = [];\n\n    if (isOption) {\n        cardHeaderRight = (\n            <div className={'card-header-right ' + optionClass}>\n                <Dropdown alignRight={true} className=\"btn-group card-option\">\n                    <Dropdown.Toggle id=\"dropdown-basic\" className=\"btn-icon\">\n                        <i className=\"feather icon-more-horizontal\" />\n                    </Dropdown.Toggle>\n                    <Dropdown.Menu as=\"ul\" className=\"list-unstyled card-option\">\n                        <Dropdown.Item as=\"li\" className=\"dropdown-item\" onClick={() => setFullCard(!fullCard)}>\n                            <i className={fullCard ? 'feather icon-minimize' : 'feather icon-maximize'} />\n                            <Link to=\"#\"> {fullCard ? 'Restore' : 'Maximize'} </Link>\n                        </Dropdown.Item>\n                        <Dropdown.Item as=\"li\" className=\"dropdown-item\" onClick={() => setCollapseCard(!collapseCard)}>\n                            <i className={collapseCard ? 'feather icon-plus' : 'feather icon-minus'} />\n                            <Link to=\"#\"> {collapseCard ? 'Expand' : 'Collapse'} </Link>\n                        </Dropdown.Item>\n                        <Dropdown.Item as=\"li\" className=\"dropdown-item\" onClick={cardReloadHandler}>\n                            <i className=\"feather icon-refresh-cw\" />\n                            <Link to=\"#\"> Reload </Link>\n                        </Dropdown.Item>\n                        <Dropdown.Item as=\"li\" className=\"dropdown-item\" onClick={cardRemoveHandler}>\n                            <i className=\"feather icon-trash\" />\n                            <Link to=\"#\"> Remove </Link>\n                        </Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n            </div>\n        );\n    }\n\n    cardHeader = (\n        <Card.Header>\n            <Card.Title as=\"h5\">{title}</Card.Title>\n            {cardHeaderRight}\n        </Card.Header>\n    );\n\n    if (fullCard) {\n        mainCardClass = [...mainCardClass, 'full-card'];\n        fullScreenStyle = { position: 'fixed', top: 0, left: 0, right: 0, width: windowSize.width, height: windowSize.height };\n    }\n\n    if (loadCard) {\n        mainCardClass = [...mainCardClass, 'card-load'];\n        loader = (\n            <div className=\"card-loader\">\n                <i className=\"pct-loader1 anim-rotate\" />\n            </div>\n        );\n    }\n\n    if (cardRemove) {\n        mainCardClass = [...mainCardClass, 'd-none'];\n    }\n\n    if (cardClass) {\n        mainCardClass = [...mainCardClass, cardClass];\n    }\n\n    card = (\n        <Card className={mainCardClass.join(' ')} style={fullScreenStyle}>\n            {cardHeader}\n            <Collapse in={!collapseCard}>\n                <div>\n                    <Card.Body>{children}</Card.Body>\n                </div>\n            </Collapse>\n            {loader}\n        </Card>\n    );\n\n    return <React.Fragment>{card}</React.Fragment>;\n};\n\nexport default MainCard;\n"],"sourceRoot":""}